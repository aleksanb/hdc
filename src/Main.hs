import System.Environment
import qualified Includer
import qualified Parser
import qualified Beautifier
import qualified Generator
import qualified Serializer
import qualified Optimizer
import qualified Text.Show.Pretty as Pr

import Control.Monad.Writer

pPutStrLn :: Bool -> String -> IO ()
pPutStrLn predicate line
  | predicate == True = do putStrLn line
  | otherwise = do return ()

runEvalWith :: String -> IO ()
runEvalWith input = do
  args <- getArgs

  let verbose = "--verbose" `elem` args

  withMacros <- Includer.include input
  let syntax_tree = Parser.parse withMacros
      ast = Beautifier.beautify syntax_tree
      ir = Generator.generate ast
      (optimized, stats) = runWriter $ Optimizer.optimize ir
      assembly = Serializer.serialize optimized

  -- Generate verbose output
  pPutStrLn verbose $Â "Expanded with macros\n" ++ withMacros
  pPutStrLn verbose $ "syntax tree:\n" ++ Pr.ppShow syntax_tree
  pPutStrLn verbose $ "Ast:\n" ++ Pr.ppShow ast
  pPutStrLn verbose $ "IR:\n" ++ Pr.ppShow ir
  pPutStrLn verbose $ "Optimized:\n" ++ Pr.ppShow optimized

  -- Generate actual output
  putStrLn "; Generated by HDC"
  putStrLn $ unlines $ map ("; "++) stats
  putStrLn $ unlines assembly

main :: IO ()
main = do
  program <- getContents
  runEvalWith program
